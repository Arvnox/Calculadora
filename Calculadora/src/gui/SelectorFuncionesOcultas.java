/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import calculadora.Calculadora;
import datos.FuncionOculta;
import java.io.IOException;
import java.util.Arrays;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;
import procesamiento.Procesador;

/**
 *
 * @author Andrés Sarmiento Tobón <ansarmientoto at unal.edu.co>
 */
public class SelectorFuncionesOcultas extends javax.swing.JFrame {

    private static final long serialVersionUID = 1000000L;
    private String cadenaActual;
    private TreeSet<FuncionOculta> funcionesOcultas = new TreeSet<>();
    private int numeroFunciones = 0;
    private FuncionOculta[] funcionesActuales;

    /**
     * Creates new form SelectorFuncionesOcultas
     */
    public SelectorFuncionesOcultas() {
        initComponents();
        try {
            setIconImage(ImageIO.read(getClass().getResource(
                    "/gui/idea.png")));
        } catch (IOException ex) {
            Logger.getLogger(SelectorFuncionesOcultas.class.getName())
                    .log(Level.SEVERE, null, ex);
        } finally {
            setLocationRelativeTo(null);
        }
    }

    /**
     *
     * @param cadena
     * @param funciones
     */
    public void elegirFuncionesOcultas(String cadena,
            FuncionOculta[] funciones) {
        cadenaActual = cadena;

        if (funciones == null || funciones.length == 0) {
            setVisible(false);
            Calculadora.getVentana().procesarCadena(cadenaActual);
            Calculadora.getVentana().setVisible(true);
            return;
        }

        numeroFunciones = funciones.length;
        funcionesActuales = funciones;
        Object[][] valoresTabla = new Object[funciones.length][4];

        for (int i = 0; i < valoresTabla.length; i++) {
            valoresTabla[i][0] = false;
            valoresTabla[i][1] = funciones[i].variable + funciones[i].funcion;
            valoresTabla[i][2] = funciones[i].variable;
            valoresTabla[i][3] = funciones[i].funcion;
        }

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
                valoresTabla,
                new String[] {
                    "Cambiar", "Cadena Original", "Variable Nueva",
                    "Función Oculta"
                }) {
            private static final long serialVersionUID = 565656L;
            Class[] types = new Class[] {
                java.lang.Boolean.class, java.lang.String.class,
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean[] {
                true, false, false, false
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        jTable1.getColumnModel().getColumn(0).setResizable(false);
        jTable1.getColumnModel().getColumn(1).setMinWidth(128);
        jTable1.getColumnModel().getColumn(2).setMinWidth(128);
        jTable1.getColumnModel().getColumn(3).setMinWidth(128);
        setVisible(true);
        jTable1.repaint();

        setLocationRelativeTo(Calculadora.getVentana());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setTitle("Elegir Funciones Ocultas");
        setBackground(VentanaCalculo.COLOR_FONDO_PREDETERMINADO);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                mostarVentanaPrincipal(evt);
            }
        });

        jPanel1.setBackground(VentanaCalculo.COLOR_FONDO_PREDETERMINADO);

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setForeground(new java.awt.Color(0, 0, 0));
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setFont(new java.awt.Font("Ubuntu Light", 0, 24)); // NOI18N
        jScrollPane1.setMaximumSize(new java.awt.Dimension(453, 324));
        jScrollPane1.setMinimumSize(new java.awt.Dimension(453, 324));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(453, 324));

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setFont(new java.awt.Font("Ubuntu Light", 0, 24)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cambiar", "Cadena Original", "Variable Nueva", "Función Oculta"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable1.setDragEnabled(true);
        jTable1.setFillsViewportHeight(true);
        jTable1.setIntercellSpacing(new java.awt.Dimension(4, 4));
        jTable1.setRowHeight(44);
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getColumn(0).setResizable(false);
        jTable1.getColumnModel().getColumn(1).setMinWidth(128);
        jTable1.getColumnModel().getColumn(2).setMinWidth(128);
        jTable1.getColumnModel().getColumn(3).setMinWidth(128);

        jPanel2.setBackground(VentanaCalculo.COLOR_FONDO_PREDETERMINADO);

        jButton1.setBackground(VentanaCalculo.COLOR_BOTON_PREDETERMINADO);
        jButton1.setFont(new java.awt.Font("Ubuntu Light", 0, 24)); // NOI18N
        jButton1.setText("Aceptar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aceptarCambios(evt);
            }
        });

        jButton2.setBackground(VentanaCalculo.COLOR_BOTON_PREDETERMINADO);
        jButton2.setFont(new java.awt.Font("Ubuntu Light", 0, 24)); // NOI18N
        jButton2.setText("Cancelar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarCambios(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(jButton1)
                .addGap(104, 104, 104)
                .addComponent(jButton2)
                .addGap(52, 52, 52))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mostarVentanaPrincipal(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_mostarVentanaPrincipal
        Calculadora.getVentana().setVisible(true);
    }//GEN-LAST:event_mostarVentanaPrincipal

    private void aceptarCambios(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aceptarCambios
        String cadenaPrevia = cadenaActual;
        cambiarCadena();
        int resultado = JOptionPane.OK_OPTION;

        if (!cadenaPrevia.replaceAll("[ ]++", "").trim().equals(cadenaActual
                .replaceAll("[ ]++", "").trim())) {
            resultado = JOptionPane.showConfirmDialog(this,
                    "Pulse Aceptar si " +
                    "desea cambiar la cadena de entrada de:\n" + cadenaPrevia +
                    "\n" + cadenaActual, "¿Aceptar cambios?",
                    JOptionPane.OK_CANCEL_OPTION);
        }

        if (resultado == JOptionPane.OK_OPTION) {
            Calculadora.getVentana().procesarCadena(cadenaActual.replaceAll(
                    Pattern.quote("(") + "[ ]++", "(").replaceAll(Pattern
                    .quote("[") + "[ ]++", "["));
            setVisible(false);
            Calculadora.getVentana().setVisible(true);
        } else {
            cadenaActual = cadenaPrevia;
        }
    }//GEN-LAST:event_aceptarCambios

    private void cancelarCambios(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarCambios
        Calculadora.getVentana().procesarCadena(cadenaActual);
        setVisible(false);
        Calculadora.getVentana().setVisible(true);
    }//GEN-LAST:event_cancelarCambios

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info :
                    javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SelectorFuncionesOcultas.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SelectorFuncionesOcultas.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SelectorFuncionesOcultas.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SelectorFuncionesOcultas.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Calculadora.getSelectorFuncionesOcultas()
                        .elegirFuncionesOcultas("asenasen(x) + acosacos(x) " +
                        "+ atanatan(x)",
                        Procesador.extraerVariablesOcultas(
                        "asenasen(x) + acosacos(x) + atanatan(x)"));
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    private void cambiarCadena() {
        funcionesOcultas = new TreeSet<>();

        for (int i = 0; i < numeroFunciones; i++) {
            boolean incluir = false;

            for (int j = 0; j < 4; j++) {
                Object valor = jTable1.getValueAt(i, j);

                if (valor != null && (valor instanceof Boolean)) {
                    incluir = ((Boolean) valor).booleanValue();
                }
            }

            if (incluir) {
                funcionesOcultas.add(funcionesActuales[i]);
            }
        }

        String preproceso = cadenaActual.replaceAll("[eE]-", "!").replaceAll(
                "[ ]++",
                "").replaceAll("-" + Pattern.quote("+"), " - ").replaceAll(
                Pattern.quote("+") + "-", " - ").replaceAll(",", " , ")
                .replaceAll(Pattern.quote("("), "( ").replaceAll(Pattern.quote(
                "["), "[ ").replaceAll(Pattern.quote("+"), " + ").replaceAll(
                "-", " - ").replaceAll(Pattern.quote("*"), " * ").replaceAll(
                "/", " / ").replaceAll("\\\\", " \\\\ ").replaceAll(Pattern
                .quote("^"), " ^ ").replaceAll("!", "E-").trim();
        StringBuilder colaSalida = new StringBuilder(preproceso.length() * 3);

        for (String item : preproceso.split(" ")) {
            colaSalida = colaSalida.append(" ");

            if (item.endsWith("(")) {
                colaSalida = colaSalida.append(revisarItem(item.substring(0,
                        item.length() - 1))).append("(");
            } else if (item.endsWith("[")) {
                colaSalida = colaSalida.append(revisarItem(item.substring(0,
                        item.length() - 1))).append("[");
            } else {
                colaSalida = colaSalida.append(item);
            }
        }

        cadenaActual = colaSalida.substring(1);
    }

    private String revisarItem(String item) {
        if (!Procesador.esVariable(item)) {
            return item;
        } else {
            for (FuncionOculta funcionOculta : funcionesOcultas) {
                if (item.startsWith(funcionOculta.variable) &&
                        item.regionMatches(true, funcionOculta.variable
                        .length(), funcionOculta.funcion, 0,
                        funcionOculta.funcion.length())) {
                    return funcionOculta.variable + " * " +
                            funcionOculta.funcion;
                }
            }

            return item;
        }
    }
}
